{
  
    
        "post0": {
            "title": "Daily covid-19 Deaths compared to average deaths the last 10 years",
            "content": "# Import pandas for data wrangling and Altair for plotting import pandas as pd import altair as alt . The number of deadths per day from 2008 until 2018 can obtained from Statbel, the Belgium federal bureau of statistics: . df = pd.read_excel(&#39;https://statbel.fgov.be/sites/default/files/files/opendata/bevolking/TF_DEATHS.xlsx&#39;) # , skiprows=5, sheet_name=sheetnames . # Get a quick look to the data df.head() . DT_DATE MS_NUM_DEATHS . 0 2008-01-01 | 342 | . 1 2008-01-02 | 348 | . 2 2008-01-03 | 340 | . 3 2008-01-04 | 349 | . 4 2008-01-05 | 348 | . df[&#39;Jaar&#39;] = df[&#39;DT_DATE&#39;].dt.year df[&#39;Dag&#39;] = df[&#39;DT_DATE&#39;].dt.dayofyear . df_plot = df.groupby(&#39;Dag&#39;)[&#39;MS_NUM_DEATHS&#39;].mean().to_frame().reset_index() . # Let&#39;s make a quick plot alt.Chart(df_plot).mark_line().encode(x=&#39;Dag&#39;, y=&#39;MS_NUM_DEATHS&#39;).properties(width=600) . The John Hopkings University CSSE keeps track of the number of covid-19 deadths per day and county on the a github reposotry: https://github.com/CSSEGISandData/COVID-19 . # Obtain the data deaths_url = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39; deaths = pd.read_csv(deaths_url, sep=&#39;,&#39;) . # Filter out Belgium deaths_be = deaths[deaths[&#39;Country/Region&#39;] == &#39;Belgium&#39;] . # Inspect how the data is stored deaths_be . Province/State Country/Region Lat Long 1/22/20 1/23/20 1/24/20 1/25/20 1/26/20 1/27/20 ... 4/9/20 4/10/20 4/11/20 4/12/20 4/13/20 4/14/20 4/15/20 4/16/20 4/17/20 4/18/20 . 23 NaN | Belgium | 50.8333 | 4.0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 2523 | 3019 | 3346 | 3600 | 3903 | 4157 | 4440 | 4857 | 5163 | 5453 | . 1 rows × 92 columns . # Create dateframe for plotting df_deaths = pd.DataFrame(data={&#39;Datum&#39;:pd.to_datetime(deaths_be.columns[4:]), &#39;Overlijdens&#39;:deaths_be.iloc[0].values[4:]}) . # Check for Nan&#39;s df_deaths[&#39;Overlijdens&#39;].isna().sum() . 0 . # Convert to integer df_deaths[&#39;Overlijdens&#39;] = df_deaths[&#39;Overlijdens&#39;].astype(int) . # Add day of the year to the dataframe df_deaths[&#39;Dag&#39;] = df_deaths[&#39;Datum&#39;].dt.dayofyear . # Plot the data dead_2008_2018 = alt.Chart(df_plot).mark_line().encode(x=&#39;Dag&#39;, y=&#39;MS_NUM_DEATHS&#39;) . # Calculate the day-by-day change df_deaths[&#39;Nieuwe covid-19 Sterfgevallen&#39;] = df_deaths[&#39;Overlijdens&#39;].diff() . # Check types df_deaths.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 88 entries, 0 to 87 Data columns (total 4 columns): # Column Non-Null Count Dtype -- -- 0 Datum 88 non-null datetime64[ns] 1 Overlijdens 88 non-null int32 2 Dag 88 non-null int64 3 Nieuwe covid-19 Sterfgevallen 87 non-null float64 dtypes: datetime64[ns](1), float64(1), int32(1), int64(1) memory usage: 2.5 KB . # Plot covid-19 deaths in Belgium according to JHU CSSE dead_covid= alt.Chart(df_deaths).mark_line(point=True).encode(x=alt.X(&#39;Dag&#39;,scale=alt.Scale(domain=(1, 110), clamp=True)), y=&#39;Nieuwe covid-19 Sterfgevallen&#39;, color=alt.ColorValue(&#39;red&#39;), tooltip=[&#39;Dag&#39;, &#39;Nieuwe covid-19 Sterfgevallen&#39;]) dead_covid . # add average deaths per day in the last 10 year to the plot dead_2008_2018 + dead_covid . df.head() . DT_DATE MS_NUM_DEATHS Jaar Dag . 0 2008-01-01 | 342 | 2008 | 1 | . 1 2008-01-02 | 348 | 2008 | 2 | . 2 2008-01-03 | 340 | 2008 | 3 | . 3 2008-01-04 | 349 | 2008 | 4 | . 4 2008-01-05 | 348 | 2008 | 5 | . df[&#39;Datum&#39;] = pd.to_datetime(df[&#39;DT_DATE&#39;]) . line = alt.Chart(df).mark_line().encode( x=alt.X(&#39;Dag&#39;, scale=alt.Scale( domain=(1, 120), clamp=True )), y=&#39;mean(MS_NUM_DEATHS)&#39; ) # Bootstrapped 95% confidence interval band = alt.Chart(df).mark_errorband(extent=&#39;ci&#39;).encode( x=alt.X(&#39;Dag&#39;, scale=alt.Scale(domain=(1, 120), clamp=True)), y=alt.Y(&#39;MS_NUM_DEATHS&#39;, title=&#39;Overlijdens per dag&#39;), ) dead_covid= alt.Chart(df_deaths).mark_line(point=True).encode( x=alt.X(&#39;Dag&#39;,scale=alt.Scale(domain=(1, 120), clamp=True)), y=&#39;Nieuwe covid-19 Sterfgevallen&#39;, color=alt.ColorValue(&#39;red&#39;), tooltip=[&#39;Dag&#39;, &#39;Nieuwe covid-19 Sterfgevallen&#39;, &#39;Datum&#39;] ) (band + line + dead_covid).properties(width=1024, title=&#39;Gemiddeld aantal overlijdens over 10 jaar versus overlijdens door covid-19 in Belgie&#39;) . Source date from sciensano . In this section, we compare the graph obtained with data obtained from sciensano. . df_sc = pd.read_csv(&#39;https://epistat.sciensano.be/Data/COVID19BE_MORT.csv&#39;) . df_sc.head() . DATE REGION AGEGROUP SEX DEATHS . 0 2020-03-10 | Brussels | 85+ | F | 1 | . 1 2020-03-11 | Flanders | 85+ | F | 1 | . 2 2020-03-11 | Brussels | 75-84 | M | 1 | . 3 2020-03-11 | Brussels | 85+ | F | 1 | . 4 2020-03-12 | Brussels | 75-84 | M | 1 | . df_dead_day = df_sc.groupby(&#39;DATE&#39;)[&#39;DEATHS&#39;].sum().reset_index() df_dead_day[&#39;Datum&#39;] = pd.to_datetime(df_dead_day[&#39;DATE&#39;]) df_dead_day[&#39;Dag&#39;] = df_dead_day[&#39;Datum&#39;].dt.dayofyear . line = alt.Chart(df).mark_line().encode( x=alt.X(&#39;Dag&#39;, title=&#39;Dag van het jaar&#39;, scale=alt.Scale( domain=(1, 120), clamp=True )), y=&#39;mean(MS_NUM_DEATHS)&#39; ) # Bootstrapped 95% confidence interval band = alt.Chart(df).mark_errorband(extent=&#39;ci&#39;).encode( x=alt.X(&#39;Dag&#39;, scale=alt.Scale(domain=(1, 120), clamp=True)), y=alt.Y(&#39;MS_NUM_DEATHS&#39;, title=&#39;Overlijdens per dag&#39;), ) dead_covid= alt.Chart(df_dead_day).mark_line(point=True).encode( x=alt.X(&#39;Dag&#39;,scale=alt.Scale(domain=(1, 120), clamp=True)), y=&#39;DEATHS&#39;, color=alt.ColorValue(&#39;red&#39;), tooltip=[&#39;Dag&#39;, &#39;DEATHS&#39;, &#39;Datum&#39;] ) (band + line + dead_covid).properties(width=750, title=&#39;Gemiddeld aantal overlijdens over 10 jaar versus overlijdens door covid-19 in Belgie&#39;) . Obtain more detail (for another blogpost...) . df_tot_sc = pd.read_excel(&#39;https://epistat.sciensano.be/Data/COVID19BE.xlsx&#39;) . df_tot_sc . DATE PROVINCE REGION AGEGROUP SEX CASES . 0 2020-03-01 | Brussels | Brussels | 10-19 | M | 1 | . 1 2020-03-01 | Brussels | Brussels | 10-19 | F | 1 | . 2 2020-03-01 | Brussels | Brussels | 20-29 | M | 1 | . 3 2020-03-01 | Brussels | Brussels | 30-39 | F | 1 | . 4 2020-03-01 | Brussels | Brussels | 40-49 | F | 1 | . ... ... | ... | ... | ... | ... | ... | . 6693 NaN | OostVlaanderen | Flanders | NaN | F | 4 | . 6694 NaN | VlaamsBrabant | Flanders | 40-49 | M | 3 | . 6695 NaN | VlaamsBrabant | Flanders | 40-49 | F | 2 | . 6696 NaN | VlaamsBrabant | Flanders | 50-59 | M | 1 | . 6697 NaN | WestVlaanderen | Flanders | 50-59 | M | 3 | . 6698 rows × 6 columns . We know that there are a lot of reional differences: . df_plot = df_tot_sc.groupby([&#39;DATE&#39;, &#39;PROVINCE&#39;])[&#39;CASES&#39;].sum().reset_index() . df_plot . DATE PROVINCE CASES . 0 2020-03-01 | Brussels | 6 | . 1 2020-03-01 | Limburg | 1 | . 2 2020-03-01 | Liège | 2 | . 3 2020-03-01 | OostVlaanderen | 1 | . 4 2020-03-01 | VlaamsBrabant | 6 | . ... ... | ... | ... | . 493 2020-04-16 | Namur | 9 | . 494 2020-04-16 | OostVlaanderen | 33 | . 495 2020-04-16 | VlaamsBrabant | 39 | . 496 2020-04-16 | WestVlaanderen | 37 | . 497 2020-04-17 | VlaamsBrabant | 1 | . 498 rows × 3 columns . df_plot[&#39;DATE&#39;] = pd.to_datetime(df_plot[&#39;DATE&#39;]) . base = alt.Chart(df_plot, title=&#39;Number of cases in Belgium per day and province&#39;).mark_line(point=True).encode( x=alt.X(&#39;DATE:T&#39;, title=&#39;Datum&#39;), y=alt.Y(&#39;CASES&#39;, title=&#39;Cases per day&#39;), color=&#39;PROVINCE&#39;, tooltip=[&#39;DATE&#39;, &#39;CASES&#39;, &#39;PROVINCE&#39;] ).properties(width=600) base . From the above graph we see a much lower number of cases in Luxembourg, Namur, Waals Brabant. .",
            "url": "https://cast42.github.io/blog/cast42/jupyter/covid19/belgium/altair/2020/04/19/deads-last-ten-year-vs-covid.html",
            "relUrl": "/cast42/jupyter/covid19/belgium/altair/2020/04/19/deads-last-ten-year-vs-covid.html",
            "date": " • Apr 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "First test post",
            "content": "import pandas as pd import altair as alt . # Check if this get published .",
            "url": "https://cast42.github.io/blog/jupyter/2020/04/18/first-test.html",
            "relUrl": "/jupyter/2020/04/18/first-test.html",
            "date": " • Apr 18, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://cast42.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Evolution of burglary in Leuven. Is the trend downwards ?",
            "content": "The local police shared a graph with the number of break-ins in Leuven per year. The article shows a graph with a downwards trendline. Can we conclude that the number of breakins is showing a downward trend based on those numbers? Let&#39;s construct a dataframe with the data from the graph. . import numpy as np import pandas as pd import altair as alt df = pd.DataFrame({&#39;year_int&#39;:[y for y in range(2006, 2020)], &#39;breakins&#39;:[1133,834,953,891,1006,1218,992,1079,1266,1112,713,669,730,644]}) df[&#39;year&#39;] = pd.to_datetime(df[&#39;year_int&#39;], format=&#39;%Y&#39;) . points = alt.Chart(df).mark_line(point=True).encode( x=&#39;year&#39;, y=&#39;breakins&#39;, tooltip=&#39;breakins&#39; ) points + points.transform_regression(&#39;year&#39;, &#39;breakins&#39;).mark_line( color=&#39;green&#39; ).properties( title=&#39;Regression trend on the number breakins per year in Leuven&#39; ) . The article claims that the number of breakins stabilizes the last years. Let&#39;s perform a local regression to check that. . # https://opendatascience.com/local-regression-in-python # Loess: https://gist.github.com/AllenDowney/818f6153ef316aee80467c51faee80f8 points + points.transform_loess(&#39;year&#39;, &#39;breakins&#39;).mark_line( color=&#39;green&#39; ).properties( title=&#39;Local regression trend on the number breakins per year in Leuven&#39; ) . But what about the trend line? Are we sure the trend is negative ? Bring in the code based on the blogpost The hacker&#39;s guide to uncertainty estimates to estimate the uncertainty.: . # Code from: https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html import scipy.optimize import random def model(xs, k, m): return k * xs + m def neg_log_likelihood(tup, xs, ys): # Since sigma &gt; 0, we use use log(sigma) as the parameter instead. # That way we have an unconstrained problem. k, m, log_sigma = tup sigma = np.exp(log_sigma) delta = model(xs, k, m) - ys return len(xs)/2*np.log(2*np.pi*sigma**2) + np.dot(delta, delta) / (2*sigma**2) def confidence_bands(xs, ys, nr_bootstrap): curves = [] xys = list(zip(xs, ys)) for i in range(nr_bootstrap): # sample with replacement bootstrap = [random.choice(xys) for _ in xys] xs_bootstrap = np.array([x for x, y in bootstrap]) ys_bootstrap = np.array([y for x, y in bootstrap]) k_hat, m_hat, log_sigma_hat = scipy.optimize.minimize( neg_log_likelihood, (0, 0, 0), args=(xs_bootstrap, ys_bootstrap) ).x curves.append( model(xs, k_hat, m_hat) + # Note what&#39;s going on here: we&#39;re _adding_ the random term # to the predictions! np.exp(log_sigma_hat) * np.random.normal(size=xs.shape) ) lo, hi = np.percentile(curves, (2.5, 97.5), axis=0) return lo, hi . # Make a plot with a confidence band df[&#39;lo&#39;], df[&#39;hi&#39;] = confidence_bands(df.index, df[&#39;breakins&#39;], 100) ci = alt.Chart(df).mark_area().encode( x=alt.X(&#39;year:T&#39;, title=&#39;&#39;), y=alt.Y(&#39;lo:Q&#39;), y2=alt.Y2(&#39;hi:Q&#39;, title=&#39;&#39;), color=alt.value(&#39;lightblue&#39;), opacity=alt.value(0.6) ) chart = alt.Chart(df).mark_line(point=True).encode( x=&#39;year&#39;, y=&#39;breakins&#39;, tooltip=&#39;breakins&#39; ) ci + chart + chart.transform_regression(&#39;year&#39;, &#39;breakins&#39;).mark_line( color=&#39;red&#39; ).properties( title=&#39;95% Confidence band of the number of breakins per year in Leuven&#39; ) . On the above chart, we see that a possitive trend might be possible as well. . Linear regression . Let&#39;s perform a linear regression with statsmodel to calculate the confidence interval on the slope of the regression line. . import statsmodels.formula.api as smf . results = smf.ols(&#39;breakins ~ index&#39;, data=df.reset_index()).fit() . results.params . Intercept 1096.314286 index -23.169231 dtype: float64 . The most likely slope of the trend line is 23.17 breakins per year. But how sure are we that the trend is heading down ? . results.summary() . C: Users lnh6dt5 AppData Local Continuum anaconda3 lib site-packages scipy stats stats.py:1535: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=14 &#34;anyway, n=%i&#34; % int(n)) . OLS Regression Results Dep. Variable: breakins | R-squared: 0.223 | . Model: OLS | Adj. R-squared: 0.159 | . Method: Least Squares | F-statistic: 3.451 | . Date: Sun, 19 Apr 2020 | Prob (F-statistic): 0.0879 | . Time: 10:26:45 | Log-Likelihood: -92.105 | . No. Observations: 14 | AIC: 188.2 | . Df Residuals: 12 | BIC: 189.5 | . Df Model: 1 | | . Covariance Type: nonrobust | | . | coef std err t P&gt;|t| [0.025 0.975] . Intercept 1096.3143 | 95.396 | 11.492 | 0.000 | 888.465 | 1304.164 | . index -23.1692 | 12.472 | -1.858 | 0.088 | -50.344 | 4.006 | . Omnibus: 1.503 | Durbin-Watson: 1.035 | . Prob(Omnibus): 0.472 | Jarque-Bera (JB): 1.196 | . Skew: 0.577 | Prob(JB): 0.550 | . Kurtosis: 2.153 | Cond. No. 14.7 | . Warnings:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified. The analysis reveals that the slope of the best fitting regression line is 23 breakins less per year. However, the confidence interval of the trend is between -50.344 and 4.006. Also the p)value of the regression coefficient is 0.088. Meaning we have eight percent chance that the negative trend is by accident. Hence, based on the current data we are not 95% percent sure the trend is downwards. Hence we can not conclude, based on this data, that there is a negative trend. This corresponds with the width of the 95% certainty band drawn that allows for an upward trend line: . # Here are the confidence intervals of the regression results.conf_int() . 0 1 . Intercept 888.464586 | 1304.163986 | . index -50.344351 | 4.005889 | . y_low = results.params[&#39;Intercept&#39;] # ?ost likely value of the intercept y_high = results.params[&#39;Intercept&#39;] + results.conf_int()[1][&#39;index&#39;] * df.shape[0] # Value of upward trend for the last year df_upward_trend = pd.DataFrame({&#39;year&#39;:[df[&#39;year&#39;].min(), df[&#39;year&#39;].max()], &#39;breakins&#39;:[y_low, y_high]}) possible_upwards_trend = alt.Chart(df_upward_trend).mark_line( color=&#39;green&#39;, strokeDash=[10,10] ).encode( x=&#39;year:T&#39;, y=alt.Y(&#39;breakins:Q&#39;, title=&#39;Number of breakins per year&#39;) ) points = alt.Chart(df).mark_line(point=True).encode(x=&#39;year&#39;, y=&#39;breakins&#39;, tooltip=&#39;breakins&#39;) (ci + points + points.transform_regression(&#39;year&#39;, &#39;breakins&#39;).mark_line(color=&#39;red&#39;) + possible_upwards_trend).properties( title=&#39;Trend analysis on the number of breakins per year in Leuven, Belgium&#39; ) . In the above graph, we see that a slight positive trend (green dashed line) is in the 95% confidence band on the regression coefficient. We are not sure that the trend on the number of breakins is downwards. .",
            "url": "https://cast42.github.io/blog/cast42/jupyter/altair/2020/02/15/breakins.html",
            "relUrl": "/cast42/jupyter/altair/2020/02/15/breakins.html",
            "date": " • Feb 15, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Bullet chart in python Altair",
            "content": "In the article &quot;Bullet Charts - What Is It And How To Use It&quot; I learned about Bullet charts. It&#39;s a specific kind of barchart that must convey the state of a measure or KPI. The goal is to see in a glance if the target is met. Here is an example bullet chart from the article: . # This causes issues to: # from IPython.display import Image # Image(&#39;https://jscharting.com/blog/bullet-charts/images/bullet_components.png&#39;) . . # &lt;img src=&quot;https://jscharting.com/blog/bullet-charts/images/bullet_components.png&quot; alt=&quot;Bullet chart&quot; style=&quot;width: 200px;&quot;/&gt; . Below is some Python code that generates bullets graphs using the Altair library. . import altair as alt import pandas as pd df = pd.DataFrame.from_records([ {&quot;title&quot;:&quot;Revenue&quot;,&quot;subtitle&quot;:&quot;US$, in thousands&quot;,&quot;ranges&quot;:[150,225,300],&quot;measures&quot;:[220,270],&quot;markers&quot;:[250]}, {&quot;title&quot;:&quot;Profit&quot;,&quot;subtitle&quot;:&quot;%&quot;,&quot;ranges&quot;:[20,25,30],&quot;measures&quot;:[21,23],&quot;markers&quot;:[26]}, {&quot;title&quot;:&quot;Order Size&quot;,&quot;subtitle&quot;:&quot;US$, average&quot;,&quot;ranges&quot;:[350,500,600],&quot;measures&quot;:[100,320],&quot;markers&quot;:[550]}, {&quot;title&quot;:&quot;New Customers&quot;,&quot;subtitle&quot;:&quot;count&quot;,&quot;ranges&quot;:[1400,2000,2500],&quot;measures&quot;:[1000,1650],&quot;markers&quot;:[2100]}, {&quot;title&quot;:&quot;Satisfaction&quot;,&quot;subtitle&quot;:&quot;out of 5&quot;,&quot;ranges&quot;:[3.5,4.25,5],&quot;measures&quot;:[3.2,4.7],&quot;markers&quot;:[4.4]} ]) alt.layer( alt.Chart().mark_bar(color=&#39;#eee&#39;).encode(alt.X(&quot;ranges[2]:Q&quot;, scale=alt.Scale(nice=False), title=None)), alt.Chart().mark_bar(color=&#39;#ddd&#39;).encode(x=&quot;ranges[1]:Q&quot;), alt.Chart().mark_bar(color=&#39;#bbb&#39;).encode(x=&quot;ranges[0]:Q&quot;), alt.Chart().mark_bar(color=&#39;steelblue&#39;, size=10).encode(x=&#39;measures[0]:Q&#39;), alt.Chart().mark_tick(color=&#39;black&#39;, size=12).encode(x=&#39;markers[0]:Q&#39;), data=df ).facet( row=alt.Row(&quot;title:O&quot;, title=&#39;&#39;) ).resolve_scale( x=&#39;independent&#39; ) .",
            "url": "https://cast42.github.io/blog/cast42/jupyter/data%20visualisation/altair/2020/01/29/bullet-chart-altair.html",
            "relUrl": "/cast42/jupyter/data%20visualisation/altair/2020/01/29/bullet-chart-altair.html",
            "date": " • Jan 29, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Simple Notebook with interactive Altair graph",
            "content": "Test fast template notebook posts . import altair as alt . Make an Altair graph . from vega_datasets import data iris = data.iris() alt.Chart(iris).mark_point().encode( x=&#39;petalLength&#39;, y=&#39;petalWidth&#39;, color=&#39;species&#39;, tooltip=&#39;species&#39; ).interactive() . Enjoy :) .",
            "url": "https://cast42.github.io/blog/cast42/jupyter/covid19/belgium/altair/2020/01/28/Altair.html",
            "relUrl": "/cast42/jupyter/covid19/belgium/altair/2020/01/28/Altair.html",
            "date": " • Jan 28, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://cast42.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "About . My name is Lode Nachtergaele. I’m an engineer by training, and currently hold the position as data scientist at Colruyt Group (a retailer in Belgium), where I spend time on writing notebooks in Python. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://cast42.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cast42.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}